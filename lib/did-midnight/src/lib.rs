use rustyscript::{Error, Module, Runtime, json_args};

pub mod did;
pub mod error;
pub mod prelude;

const STATE: &str = "0003000202eb01010a000000000000000000000004000000014020010100000020000000c3eba782cc302309a533f19266ee2f962c51e780be96d8e8a16d6685a0ca276b010000000100000000030000000140080100000020000000b00f90815436642458d57a3833a1e19d2f058346c1db6b7a07355e8575d15c330100000001000000000300000001010101000000200000000261e0060edac43cd5c55d4efd8b0c1292726c37f20912368c7a7a9322d127c001000000010000000001000000000100000020000000957b88b12730e646e0f33d3618b77dfa579e8231e3c59c7104be7165611c80270100000002010000002000000075ad752a539ff58fc415c3c8a5b84b1b69726295a878cb1cd913d43fddff38a6010000000110000000200000007586d6d5536e8e46bf62018b8f1477c3cbbdeaaaac46744baa2583f4bf2ca12120000000e17a2aad4fca043cf8592a20dfd4e0b898d803dd9b2fc51bb6298767f39f8acf200000006318593afe78a287ebc01d42bc861ca4ea2d4a5968f0dc423f001fc85fa3adef20000000e17a2aad4fca043cf8592a20dfd4e0b898d803dd9b2fc51bb6298767f39f8acf200000004207919aaf473eeaf59ea23caab818f1d52f72b1878d6eb8b123f22e1de3f9c4200000004207919aaf473eeaf59ea23caab818f1d52f72b1878d6eb8b123f22e1de3f9c4200000004207919aaf473eeaf59ea23caab818f1d52f72b1878d6eb8b123f22e1de3f9c4200000004207919aaf473eeaf59ea23caab818f1d52f72b1878d6eb8b123f22e1de3f9c4200000004207919aaf473eeaf59ea23caab818f1d52f72b1878d6eb8b123f22e1de3f9c4200000004207919aaf473eeaf59ea23caab818f1d52f72b1878d6eb8b123f22e1de3f9c4200000004207919aaf473eeaf59ea23caab818f1d52f72b1878d6eb8b123f22e1de3f9c420000000957b88b12730e646e0f33d3618b77dfa579e8231e3c59c7104be7165611c802720000000957b88b12730e646e0f33d3618b77dfa579e8231e3c59c7104be7165611c802720000000957b88b12730e646e0f33d3618b77dfa579e8231e3c59c7104be7165611c802720000000957b88b12730e646e0f33d3618b77dfa579e8231e3c59c7104be7165611c802720000000957b88b12730e646e0f33d3618b77dfa579e8231e3c59c7104be7165611c802701000000020101050000000000000000000000130000000f0000006170706c794f7065726174696f6e7300000000c2040000010400bb04000002ea0b0000030e12000000b39e47c513c70f34396d7970edf75b54be5728bdd6a6bc64d690c58490d13601c520db2bde66b9aa9da54467d48c2ecaa5698abc72b8540967bcfdb13ed74ac5462c427ba6b82a42f613fbbcd9ebacbb602176b45f7eddd169d70c8a8a7128488ab5755f4f5a2de3fc4e22ab4422fad0870a8e0334b13030a4aa2e83ac4c75b2dd6adfc5aa38415e53e3123d9d894d7dadf06fa313d6f6399131fc4bf799edd9ca9ad35e26ea6804d96f46a1f85c28ff2f02b2543eae210df4509fdabad73b0591cdbec0dc1a5fd45dde76958e19bc11a848351c257b87d7b5e6325867e7770af5bd0f6dd84e994230bc41c58cf1564782a8123ba99fd64bdd1f79ce9dee432f40d6d097cebc29e4f69861b6f6658270bad5127e8e44ec4aa13afde7bd5a12aa980466d1a2267a3d5cbad6ce0c4f9eae9131034375e6a3c2541a16916ea05cf7c43c1141897b17b1b7e4b937d4fbaabdb19d4e4f6d6eb7f6bb8653e26d6df483d3bf0759ec03426f0a97353a574b2eeebcf85f177f1aaa35eb39494c9d06f605989bc036b5b56fc6014c29bc9b05858367ecce80553185fdb1581448bf8926948c0c6b6aa1c24b297a15d624083e6a5ca6f3642071e10c21bd294a09f550cecd8cc88634d016e254ab44cf8bda4d6f092c7f7b313a8c81298f337fb3a40055a58fae6b83d7069dcfced7544e10afb788fb6f1fc49b078f49f96ae356e6769bceb9d9c7994c5b7e5a3407d6458efcf73dada8bab8561e42e4b9da01ab58d429d1da76df7db451e83018968de8fd01f6d6124a4634b868fd32fa8a34126f591296c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a97054c60cd2a04e8f2ead4580dcd52bff9d03e70961662904803e12d234465b096f2b92730edcc15eec2e9086783d508b90be45702d76bc05b499574e8d8e3c65767f7128b9d0fb68bd8f0a8f4b3c51a9562edc37791490b0b078d0c30e4c3ba7974f00ac918379ed17c071b21e25dc8b2d4d603fff7a36a21353a83aad69ad580c80bda21627aae82d4a1bfa5a9e14868fe7dd7b4d1bea304f0e5a1967a1376e2b4bdb86dd6d6871e7e6d07e4ad2cc98aec914e81e1906fc82ff8b524d79198b864e7dadfe125afb240fb02aacfb5f345690ed20d60730588d1839d322807395bfc13e31123672910ab38ae185a2fea1284ef7b8204ad4a7176635aa26f3b6b29534f43b51a899cf992bc5014a97d0c7cc061899df789695cde7df2971cd21822effd8551ce40484acfe005a8de80db8af7bfb9236a8c6858e1c0a3ea15610dc02610a0d9c16585ae66c878b781db6a5d24e60079ea0a421f9beb8177b1b24076b1a538a7be2313f48f7d032430e9217e8b29a737335193f615fcefd0e28deab418164d7de2b2560619a11ede8364036a1989a80b497c1492dbebcd5f5c7d37baf608c319db45d9ed8d7a3a7b35659a1d2cda0233e4341506e78005bc181238e64838c1d94cb77781d088ece1c7fc70264d22216855ae86b2d2e8a27be3c6bb2623abaf1b667ed89fb7f075e56c5192745f2eb8c09e4635d825240c6714eb7ade455c840748864ecfffbf9e4f1f31c99508b48fdb2975eb118421b6a1906746abfee37a2564e1467c236d58174d40a090900bdcb6103b0d9709c55193eaf760200000020000000a2ca65b3fbe5cefaf94d132f03babd7bf24edc09af4ea0f8891b2f687564d2db2000000041f5b20294dc106168ed0c4a9718b1db4ee7f20f199a0f3b8bf2804ac065b955000000000100000020000000bb1a7506ec29cb9cd873ee120f79d5eb361bebb97fb087c842c0fccbf9ea8f1101000000010100000020000000e19f88e846ceef8bab3d5ec8ff0ee2fa30505916fe8eff7f42b71144b313ec212a00000003482400000020000000b19f417cb92e09b0a2f57c7f3918abe7423af9bc08fac61c45a9f785874f28d901000100000001001cdb4b92bd982f9927c22e1bac7cd8d4eb7ce874ba39e7f0d59ee69c3ec9f03a0100000000000000";

pub fn call_ts_hello() -> Result<String, Error> {
    let module = Module::load("../../result/bundle-pure-deno.js")?;
    let mut runtime = Runtime::new(Default::default())?;
    let handle = runtime.load_module(&module)?;
    let greeting: String = runtime.call_function(Some(&handle), "decodeContractState", json_args!(STATE))?;
    Ok(greeting)
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_call_ts_hello() {
        let result = call_ts_hello().unwrap();
        assert_eq!(result, "Hello");
    }
}
