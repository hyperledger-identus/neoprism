diff --git a/build.sbt b/build.sbt
index bc065dae..f4659805 100644
--- a/build.sbt
+++ b/build.sbt
@@ -638,8 +638,14 @@ lazy val didPrismNode = project
       // REMOVE // "com.thesamet.scalapb" %%% "scalapb-runtime" % scalapb.compiler.Version.scalapbVersion % "protobuf",
       "com.thesamet.scalapb" %%% "scalapb-runtime-grpc" % scalapb.compiler.Version.scalapbVersion
     ),
-    assembly / mainClass := Some("fmgp.prism.Node"), // TODO Move to a new repo
+    assembly / mainClass := Some("fmgp.did.method.prism.node.PrismNode"), // TODO Move to a new repo
     assembly / assemblyJarName := "prism-node.jar", // TODO Move to a new repo
+    assemblyMergeStrategy := {
+      case PathList("io", "netty", "handler", "codec", xs @ _*)         => MergeStrategy.first
+      case x =>
+        val oldStrategy = (ThisBuild / assemblyMergeStrategy).value
+        oldStrategy(x)
+    },
     run / fork := false
   )
   .dependsOn(didResolverPrism.jvm)
diff --git a/did-method-prism-node/src/main/protobuf/prism-node-api.proto b/did-method-prism-node/src/main/protobuf/prism-node-api.proto
index 39cdd2fd..1173976f 100644
--- a/did-method-prism-node/src/main/protobuf/prism-node-api.proto
+++ b/did-method-prism-node/src/main/protobuf/prism-node-api.proto
@@ -1,5 +1,7 @@
 syntax = "proto3";
 
+package io.iohk.atala.prism.protos;
+
 import "scalapb/scalapb.proto";
 option (scalapb.options) = {
   package_name: "proto.prism.node"
@@ -280,4 +282,4 @@ message DeactivateDIDOutput {}
      AWAIT_CONFIRMATION = 2; // The transaction containing this operation has been published to the chain, but hasn't been processed by PRISM yet.
      CONFIRMED_AND_APPLIED = 3; // The operation has been successfully applied to the PRISM.
      CONFIRMED_AND_REJECTED = 4; // The operation has been processed by PRISM, but rejected because of some error.
- }
\ No newline at end of file
+ }
diff --git a/did-method-prism-node/src/main/scala/fmgp/did/method/prism/node/PrismNode.scala b/did-method-prism-node/src/main/scala/fmgp/did/method/prism/node/PrismNode.scala
index 5424f95e..e0ea8b8a 100644
--- a/did-method-prism-node/src/main/scala/fmgp/did/method/prism/node/PrismNode.scala
+++ b/did-method-prism-node/src/main/scala/fmgp/did/method/prism/node/PrismNode.scala
@@ -24,9 +24,9 @@ object PrismNode extends ServerMain {
   override def services = ServiceList
     .addZIO(ZIO.log("Start PrismNode") *> PrismNodeImpl.make)
     .provide(
-      // ZLayer.fromZIO(Ref.make(PrismState.empty))
-      ZLayer.succeed(IndexerConfig(mBlockfrostConfig = None, workdir = "../../prism-vdr/mainnet")) >>>
-        ZLayer.fromZIO(IndexerUtils.loadPrismStateFromChunkFiles)
+      ZLayer.fromZIO(Ref.make(PrismState.empty))
+      // ZLayer.succeed(IndexerConfig(mBlockfrostConfig = None, workdir = "../../prism-vdr/mainnet")) >>>
+      //   ZLayer.fromZIO(IndexerUtils.loadPrismStateFromChunkFiles)
     )
 
 }
diff --git a/did-method-prism-node/src/main/scala/fmgp/did/method/prism/node/PrismNodeImpl.scala b/did-method-prism-node/src/main/scala/fmgp/did/method/prism/node/PrismNodeImpl.scala
index e81d4dcf..68f37b3e 100644
--- a/did-method-prism-node/src/main/scala/fmgp/did/method/prism/node/PrismNodeImpl.scala
+++ b/did-method-prism-node/src/main/scala/fmgp/did/method/prism/node/PrismNodeImpl.scala
@@ -8,6 +8,8 @@ import fmgp.util.Base64
 import fmgp.did.DIDSubject
 import fmgp.did.method.prism._
 import fmgp.did.method.prism.cardano._
+import fmgp.did.method.prism.proto.MySignedPrismOperation
+import fmgp.did.method.prism.proto.OP
 
 object PrismNodeImpl {
   def make = for {
@@ -41,12 +43,18 @@ case class PrismNodeImpl(refState: Ref[PrismState], walletConfig: CardanoWalletC
           .asException()
       )
     state <- refState.get
-    didDataEffect = state.ssi2eventsId.get(did).map { operations =>
-      val ops = operations.map(op => state.getEventsByHash(op.eventHash)).flatten
-      SSI.make(did, ops).didData
-    }
+    didDataEffect <- ZIO
+      .attempt(state.ssi2eventsId.get(did).map { operations =>
+        val ops = operations.map(op => state.getEventsByHash(op.eventHash)).flatten
+        SSI.make(did, ops).didData
+      })
+      .logError
+      .catchAll(_ => ZIO.none)
+    didDataEffect2 = didDataEffect.filterNot(didData =>
+      didData.context.isEmpty && didData.publicKeys.isEmpty && didData.services.isEmpty
+    )
     ret = GetDidDocumentResponse(
-      document = didDataEffect,
+      document = didDataEffect2,
       lastSyncedBlockTimestamp = Some(state.lastSyncedBlockTimestamp),
       lastUpdateOperation = com.google.protobuf.ByteString.EMPTY // FIXME
     )
@@ -175,6 +183,23 @@ case class PrismNodeImpl(refState: Ref[PrismState], walletConfig: CardanoWalletC
     _ <- ZIO.foreach(request.signedOperations.toSeq.zipWithIndex) { case (sp, index) =>
       ZIO.log(s"Operation $index to '${sp.toProtoString}'")
     }
+    _ <- refState.modify { state =>
+      val (_, b) = state.lastSyncedBlockEpochSecondNano
+      val newState = request.signedOperations.zipWithIndex.foldLeft(state) { case (acc, (op, idx)) =>
+        state.addEvent(
+          MySignedPrismOperation(
+            tx = "",
+            b = b,
+            o = idx,
+            signedWith = op.signedWith,
+            signature = op.signature.toByteArray(),
+            operation = OP.fromPrismOperation(op.operation.get),
+            protobuf = op.operation.get
+          )
+        )
+      }
+      ((), newState)
+    }
   } yield ScheduleOperationsResponse(
     outputs = Seq.empty
   )
